---
import FontAwesomeIcon from './FontAwesomeIcon.astro'
import { faCircle } from '@fortawesome/free-solid-svg-icons'
import type { IconDefinition } from '@fortawesome/free-solid-svg-icons'
import { classesToString, getThemeClasses, type Theme } from './theme'

export interface Props {
	/** スイッチのラベル */
	label?: string
	/** スイッチのID */
	id?: string
	/** テーマ設定 */
	theme?: Theme
	/** アイコン定義 */
	icon?: IconDefinition
	/** 視覚的にラベルを隠すオプション */
	hideLabel?: boolean
	/** 追加のクラス */
	addClass?: string

	// カスタマイズオプション
	/** アイコンのクラス */
	iconClass?: string[]
	/** ラベルのクラス */
	labelClass?: string

	// 従来の直接スタイル指定（後方互換性のため）
	/** 背景色のカスタムクラス */
	bgColor?: string
}

const {
	label = '',
	id = 'toggleSwitch',
	theme = 'default',
	icon = faCircle,
	hideLabel = false,
	addClass = '',

	// カスタマイズオプション
	iconClass,
	labelClass = 'ml-3 text-sm',

	// 従来の直接スタイル指定
	bgColor,
} = Astro.props as Props

// トグルスイッチのベースとなるスタイル
const toggleBaseClasses = {
	// 基本レイアウト
	'group flex items-center rounded-full p-1 aria-[pressed=false]:bg-neutral-500/30': true,
	// トランジション
	'duration-300 ease-in-out': true,
	// フォーカス状態
	'focus:ring-2 focus:ring-primary': true,
	// サイズ設定
	'w-12 h-6': true,
	// 追加クラス
	[bgColor]: !!bgColor,
}

// 直接スタイル指定がある場合はそれを優先
const buttonClasses = getThemeClasses(
	theme,
	'button',
	`${classesToString(toggleBaseClasses)} ${addClass}`
)

// アイコンクラスの処理
const defaultIconClasses = [
	'w-5',
	'h-5',
	'text-white',
	'rounded-full',
	'shadow-md',
	'transform',
	'duration-300',
	'ease-in-out',
	'translate-x-0',
	'group-aria-pressed:translate-x-5',
]

const processedIconClass = iconClass || defaultIconClasses
---

<label
	class='flex items-center cursor-pointer'
	aria-label={hideLabel ? label : undefined}
>
	<button
		id={id}
		class={buttonClasses}
		tabindex='0'
		role='switch'
		type='button'
		aria-pressed='false'
		aria-label={label || 'トグルスイッチ'}
	>
		<FontAwesomeIcon
			icon={icon}
			params={{
				classes: processedIconClass,
			}}
		/>
	</button>
	{label && !hideLabel && <span class:list={[labelClass]}>{label}</span>}
</label>

<script define:vars={{ id }}>
	const btn = document.getElementById(id)
	// クリックイベントの処理
	btn.addEventListener('click', () => {
		btn.setAttribute(
			'aria-pressed',
			btn.getAttribute('aria-pressed') === 'true' ? 'false' : 'true'
		)
	})

	// キーボードイベントの処理（アクセシビリティ向上）
	btn.addEventListener('keydown', (event) => {
		if (event.key === ' ' || event.key === 'Enter') {
			event.preventDefault()
			btn.click()
		}
	})
</script>
