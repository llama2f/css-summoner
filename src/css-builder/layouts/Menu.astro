---
// Astro.glob の返り値の型を定義
// 必要に応じて frontmatter など他のプロパティも追加可能
interface AstroPage {
	url: string
	// 必要であれば他のプロパティも追加:
	// file: string;
	// default: ComponentInstance; // eager: true の場合
	// getHeadings?: () => Promise<MarkdownHeading[]>; // Markdown/MDX の場合
	// frontmatter?: Record<string, any>;
}

// import.meta.glob の結果を型アサーション
const pages = Object.values(
	import.meta.glob<AstroPage>('../../pages/css-builder/*.astro', {
		eager: true,
	})
)

// filter と map の中で item の型を明示
const menuItems = pages.filter(
	(item: AstroPage): item is AstroPage & { url: string } => {
		// 型ガードを追加
		// item.url が存在し、かつファイル名が '_' で始まらないことを確認
		const fileName = item.url?.split('/').pop()
		return typeof fileName === 'string' && !fileName.startsWith('_')
	}
)
---

<h3 class='text-lg font-bold mb-2'>Component Docs</h3>
<nav class='docs-menu'>
	<ul class='text-sm flex flex-wrap gap-2'>
		{
			menuItems.map((item) => {
				// pop() の結果が undefined の可能性があるため、Optional chaining と Nullish coalescing を使用
				const fileName =
					item.url.split('/').pop()?.replace('.astro', '') ?? 'unknown'
				return (
					<li>
						<a href={item.url} class='btn-outline-neutral btn-xs'>
							{fileName}
						</a>
					</li>
				)
			})
		}
	</ul>
	<style>
		.docs-menu {
			padding: 1rem;
		}

		.docs-menu ul {
			list-style: none;
			padding: 0;
			margin: 0;
		}

		.docs-menu a {
			color: #333;
			text-decoration: none;
			padding: 0.2rem;
			display: block;
			border-radius: 4px;
			transition: background-color 0.2s;
		}

		.docs-menu a:hover {
			background-color: #f0f0f0;
		}
	</style>
</nav>
