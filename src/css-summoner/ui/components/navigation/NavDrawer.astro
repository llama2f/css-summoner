---
import PageContent from './PageContent.astro'
import { getPageType } from '@ui-data/navigation'

// 現在のパスを取得してページタイプを判定
const currentPath = Astro.url.pathname
const pageType = getPageType(currentPath)
const isMainPage = pageType === 'main'

// メインページでもデフォルトで非表示
const initialHiddenState = true
---

<div
	id='nav-drawer'
	class='nav-drawer'
	aria-hidden={initialHiddenState ? 'true' : 'false'}
>
	<div class='nav-drawer-backdrop'></div>
	<div class='nav-drawer-content'>
		<div class='nav-drawer-header'>
			<h2 class='text-lg font-semibold text-neutral-light'>Menu</h2>
			<button
				id='nav-drawer-close'
				class='nav-drawer-close-button'
				aria-label='メニューを閉じる'
			>
				<svg
					xmlns='http://www.w3.org/2000/svg'
					viewBox='0 0 24 24'
					fill='none'
					stroke='currentColor'
					stroke-width='2'
					stroke-linecap='round'
					stroke-linejoin='round'
					class='w-6 h-6'
				>
					<line x1='18' y1='6' x2='6' y2='18'></line>
					<line x1='6' y1='6' x2='18' y2='18'></line>
				</svg>
			</button>
		</div>
		<div class='nav-drawer-body'>
			<PageContent />
		</div>
	</div>
</div>

<style>
	.nav-drawer {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: 50;
		visibility: hidden;
		pointer-events: none;
		transition: visibility 0.3s;
	}

	.nav-drawer[aria-hidden='false'] {
		visibility: visible;
		pointer-events: auto;
	}

	.nav-drawer-backdrop {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.5);
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	.nav-drawer[aria-hidden='false'] .nav-drawer-backdrop {
		opacity: 1;
	}

	.nav-drawer-content {
		position: absolute;
		top: 0;
		right: 0;
		width: 85%;
		max-width: 320px;
		height: 100%;
		background-color: var(--neutral-dark);
		color: var(--neutral-light);
		box-shadow: -2px 0 8px rgba(0, 0, 0, 0.15);
		transform: translateX(100%);
		transition: transform 0.3s ease;
		display: flex;
		flex-direction: column;
	}

	.nav-drawer[aria-hidden='false'] .nav-drawer-content {
		transform: translateX(0);
	}

	.nav-drawer-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 1rem;
		border-bottom: 1px solid var(--neutral-700);
	}

	.nav-drawer-close-button {
		background: none;
		border: none;
		color: var(--neutral-light);
		cursor: pointer;
		padding: 0.25rem;
		border-radius: 0.25rem;
		transition: background-color 0.2s;
	}

	.nav-drawer-close-button:hover {
		background-color: var(--neutral-700);
	}

	.nav-drawer-body {
		flex: 1;
		overflow-y: auto;
		background-color: var(--neutral-dark);
	}

	/* ダークモード対応 - 既に対応済みのため削除 */
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const navDrawer = document.getElementById('nav-drawer')
		const closeButton = document.getElementById('nav-drawer-close')
		const backdrop = document.querySelector('.nav-drawer-backdrop')

		// トグル関数
		function toggleNavDrawer(isOpen?: boolean) {
			if (!navDrawer) return

			if (typeof isOpen !== 'boolean') {
				isOpen = navDrawer.getAttribute('aria-hidden') === 'true'
			}

			// 要素のaria-hidden属性を変更する前に、現在の状態を記録
			const wasHidden = navDrawer.getAttribute('aria-hidden') === 'true'

			// 状態を更新
			navDrawer.setAttribute('aria-hidden', String(!isOpen))

			// 完全なアニメーション後にのみ非表示にする処理
			if (!isOpen && !wasHidden) {
				// 閉じる場合のみ、遅延処理を追加
				setTimeout(() => {
					// 途中でキャンセルされていないかチェック
					if (navDrawer && navDrawer.getAttribute('aria-hidden') === 'true') {
						// アニメーション完了後にスクロール制御を解除
						document.body.style.overflow = ''
					}
				}, 300) // アニメーション時間に合わせる（300ms）
			} else if (isOpen) {
				// 開く場合はすぐにスクロールを制御
				document.body.style.overflow = 'hidden'
			}

			// メニュー状態変更イベントを発行
			window.dispatchEvent(
				new CustomEvent('css-builder-nav-menu-state', {
					detail: { isOpen: !isOpen },
				})
			)
		}

		// カスタムイベントのリスナー
		window.addEventListener('dispatch-css-builder-action', ((
			event: CustomEvent
		) => {
			const action = event.detail?.action
			if (action === 'toggleNavMenu') {
				toggleNavDrawer()
			}
		}) as EventListener)

		// 閉じるボタンのイベントリスナー
		if (closeButton) {
			closeButton.addEventListener('click', () => {
				toggleNavDrawer(false)
			})
		}

		// バックドロップクリックで閉じる
		if (backdrop) {
			backdrop.addEventListener('click', () => {
				toggleNavDrawer(false)
			})
		}

		// ESCキーで閉じる
		document.addEventListener('keydown', (event) => {
			if (
				event.key === 'Escape' &&
				navDrawer &&
				navDrawer.getAttribute('aria-hidden') === 'false'
			) {
				toggleNavDrawer(false)
			}
		})
	})
</script>
