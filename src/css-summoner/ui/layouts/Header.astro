---
import ThemeSwitcher from '@components/astro/ThemeSwitcher.astro'
import siteData from '@configs/siteData.json'
import FontAwesomeIcon from '@components/astro/FontAwesomeIcon.astro'
import { faBars, faPalette, faBook } from '@fortawesome/free-solid-svg-icons'
import { getPageType } from '@ui-data/navigation'

// 現在のurlパスを取得
const currentPath = Astro.url.pathname
// ページタイプを判定
const pageType = getPageType(currentPath)
// メインページかどうか
const isMainPage = pageType === 'main'

const { title = siteData.siteName } = Astro.props
---

<header
	class='flex items-center justify-between sticky top-0 z-30 p-2 lg:p-4 bg-neutral-dark border-b border-neutral-200 dark:border-neutral-700'
>
	<a href='/' tabindex='0'>
		<h1 class='text-lg md:text-xl font-bold text-neutral-light'>
			{title}
		</h1>
	</a>

	<div class='flex items-center gap-2 lg:gap-4'>
		{/* デスクトップのみメニュー */}
		<a
			href='./usage'
			tabindex='0'
			class='underline text-white no-default hidden lg:flex justify-center items-center gap-1'
			><FontAwesomeIcon icon={faBook} /><span class='uppercase'>
				usage
			</span></a
		>

		{/* テーマスイッチャー */}
		<ThemeSwitcher bgColor='bg-neutral-500/30' position='relative' />

		<div class='lg:hidden flex items-center gap-1'>
			{/* メインページのみパレットボタンを表示 */}
			{
				isMainPage && (
					<button
						id='mobile-palette-button'
						class='btn btn-icon btn-sm p-1'
						aria-label='カラーパレットを開く'
						title='カラーパレット'
					>
						<FontAwesomeIcon
							icon={faPalette}
							params={{ classes: ['h-5', 'w-5'] }}
						/>
					</button>
				)
			}

			{/* メニューボタン - ページタイプに応じてIDを変更 */}
			<button
				id={isMainPage ? 'mobile-menu-button' : 'nav-menu-button'}
				class='btn btn-icon btn-sm p-1'
				aria-label='メニューを開く'
				title='メニュー'
				aria-expanded='false'
				data-page-type={pageType}
			>
				<FontAwesomeIcon icon={faBars} params={{ classes: ['h-5', 'w-5'] }} />
			</button>
		</div>
	</div>
</header>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const menuButton = document.getElementById('mobile-menu-button')
		const navMenuButton = document.getElementById('nav-menu-button')
		const paletteButton = document.getElementById('mobile-palette-button')

		// メインページのメニューボタンクリック時
		if (menuButton) {
			menuButton.addEventListener('click', () => {
				window.dispatchEvent(
					new CustomEvent('dispatch-css-builder-action', {
						detail: { action: 'toggleMobileMenu' },
					})
				)
			})
		}

		// その他ページのナビメニューボタンクリック時
		if (navMenuButton) {
			navMenuButton.addEventListener('click', () => {
				window.dispatchEvent(
					new CustomEvent('dispatch-css-builder-action', {
						detail: { action: 'toggleNavMenu' },
					})
				)
			})
		}

		// パレットボタンクリック時
		if (paletteButton) {
			paletteButton.addEventListener('click', () => {
				window.dispatchEvent(
					new CustomEvent('dispatch-css-builder-action', {
						detail: { action: 'toggleCssVarEditor' },
					})
				)
			})
		}

		// ClassBuilder からのメニュー状態変更イベントを購読
		if (menuButton) {
			const updateAriaExpanded = (event: CustomEvent) => {
				const isOpen = event.detail?.isOpen
				if (typeof isOpen === 'boolean') {
					menuButton.setAttribute('aria-expanded', String(isOpen))
				}
			}
			window.addEventListener(
				'css-builder-mobile-menu-state',
				updateAriaExpanded as unknown as EventListener
			)
		}

		// ナビゲーションメニュー状態変更イベントを購読
		if (navMenuButton) {
			const updateAriaExpanded = (event: CustomEvent) => {
				const isOpen = event.detail?.isOpen
				if (typeof isOpen === 'boolean') {
					navMenuButton.setAttribute('aria-expanded', String(isOpen))
				}
			}
			window.addEventListener(
				'css-builder-nav-menu-state',
				updateAriaExpanded as unknown as EventListener
			)
		}
	})
</script>
