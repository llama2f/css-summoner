---
import ThemeSwitcher from '@components/astro/ThemeSwitcher.astro'
import siteData from '@configs/siteData.json'
import FontAwesomeIcon from '@components/astro/FontAwesomeIcon.astro'
import { faBars, faPalette } from '@fortawesome/free-solid-svg-icons'

//現在のurlパスを取得
const currentPath = Astro.url.pathname
//パスにdocsが含まれているかを判定
const isDocsPage = currentPath.includes('docs')

const { title = siteData.siteName } = Astro.props
---

<header
	class='flex items-center justify-between sticky top-0 z-30 p-2 lg:p-4 bg-neutral-dark border-b border-neutral-200 dark:border-neutral-700'
>
	<a href='/' tabindex='0'>
		<h1 class='text-lg md:text-xl font-bold text-neutral-light'>
			{title}
		</h1>
	</a>

	<div class='flex items-center gap-2'>
		{/* テーマスイッチャーを先に配置 */}
		<ThemeSwitcher bgColor='bg-neutral-500/30' position='relative' />

		{/* ドキュメントページ以外でカスタマイズ系ボタン表示 */}
		{
			!isDocsPage && (
				<div class='lg:hidden flex items-center gap-1'>
					<button
						id='mobile-palette-button'
						class='btn btn-icon btn-sm p-1'
						aria-label='カラーパレットを開く'
						title='カラーパレット'
					>
						<FontAwesomeIcon
							icon={faPalette}
							params={{ classes: ['h-5', 'w-5'] }}
						/>
					</button>
					<button
						id='mobile-menu-button'
						class='btn btn-icon btn-sm p-1'
						aria-label='メニューを開く'
						title='メニュー'
						aria-expanded='false'
					>
						<FontAwesomeIcon
							icon={faBars}
							params={{ classes: ['h-5', 'w-5'] }}
						/>
					</button>
				</div>
			)
		}
	</div>
</header>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const menuButton = document.getElementById('mobile-menu-button')
		const paletteButton = document.getElementById('mobile-palette-button')

		// メニューボタンクリック時にカスタムイベントを発行
		if (menuButton) {
			menuButton.addEventListener('click', () => {
				window.dispatchEvent(
					new CustomEvent('dispatch-css-builder-action', {
						detail: { action: 'toggleMobileMenu' },
					})
				)
			})
		}

		// パレットボタンクリック時にカスタムイベントを発行
		if (paletteButton) {
			paletteButton.addEventListener('click', () => {
				window.dispatchEvent(
					new CustomEvent('dispatch-css-builder-action', {
						detail: { action: 'toggleCssVarEditor' },
					})
				)
			})
		}

		// ClassBuilder からのメニュー状態変更イベントを購読
		if (menuButton) {
			const updateAriaExpanded = (event: CustomEvent) => {
				const isOpen = event.detail?.isOpen
				if (typeof isOpen === 'boolean') {
					menuButton.setAttribute('aria-expanded', String(isOpen))
				}
			}
			window.addEventListener(
				'css-builder-mobile-menu-state',
				updateAriaExpanded as EventListener
			)

			// 初期状態を取得するイベントを発行 (ClassBuilder側で対応が必要な場合)
			// window.dispatchEvent(new CustomEvent('request-css-builder-mobile-menu-state'));
		}
	})
</script>
